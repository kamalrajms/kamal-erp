import React, { useEffect, useState } from "react";
import CreateNewQuotationSearchSelectOption from "./createNewQuotationSearchSelectOption";

export default function QuotationList({
  descriptions,
  quotation_table_data,
  unique_key,
  setQuotationList_data,
  productTotal,
  deleteQuotationProduct,
  inputDisable,
  editQuotationData,
}) {
  const [description, setdescription] = useState("");

  const [uomOptions, setuomOptions] = useState([]);
  const [taxOptions, settaxOptions] = useState([]);

  const [product_details, setproduct_details] = useState({
    unique_key: unique_key,
    product_id: "",
    description: "",
    uom: "--",
    unit_price: 0,
    discount: 0,
    tax: "--",
    quantity: 0,
  });
  //edit
  useEffect(() => {
    if (editQuotationData) {
      setproduct_details((prev) => {
        return { ...prev, ...editQuotationData };
      });

      setdescription(editQuotationData.description);
    }
  }, [editQuotationData]);

  useEffect(() => {
    setQuotationList_data((prev) => {
      return prev.map((ele) => {
        if (ele.unique_key === unique_key) {
          return product_details;
        }
        return ele;
      });
    });
  }, [product_details]);

  useEffect(() => {
    if (description === "") {
      setproduct_details((prev) => {
        return { ...prev, description: "--", unit_price: 0, discount: 0 };
      });
      return;
    }
    setproduct_details((prev) => {
      const data = quotation_table_data.find(
        (ele) => ele.description === description
      );

      if (description !== "") {
        return {
          ...prev,
          description,
          unit_price: data.unit_price,
          discount: data.discount,
          product_id: data.product_id,
        };
      } else return { ...prev };
    });

    setuomOptions(
      description !== ""
        ? quotation_table_data.find((ele) => ele.description === description)
              .uom
        : []
    );

    settaxOptions(
      description !== ""
        ? quotation_table_data.find((ele) => ele.description === description)
            .tax
        : []
    );
  }, [description]);

  console.log(description);
  console.log(product_details);

  return (
    <tr>
      <td>{unique_key + 1}</td>
      <td style={{ position: "relative", minWidth: "200px" }}>
        <CreateNewQuotationSearchSelectOption
          descriptions={descriptions}
          description={description}
          setdescription={setdescription}
          inputDisable={inputDisable}
        />
      </td>

      <td>{product_details.product_id}</td>

      <td>
        <input
          type="number"
          value={product_details.quantity}
          onChange={(e) => {
            setproduct_details((prev) => {
              return { ...prev, quantity: e.target.value };
            });
          }}
          required
          disabled={inputDisable}
        />
      </td>
      <td>
        <select
          required
          onChange={(e) => {
            setproduct_details((prev) => {
              return { ...prev, uom: e.target.value };
            });
          }}
          value={product_details.uom}
          disabled={inputDisable}
        >
          <option value="">Select UOM</option>
          {uomOptions.map((ele, ind) => (
            <option key={ind} value={ele}>
              {ele}
            </option>
          ))}
        </select>
      </td>
      <td>
        <input
          type="number"
          value={product_details.unit_price}
          onChange={(e) => {
            setproduct_details((prev) => {
              return { ...prev, unit_price: e.target.value };
            });
          }}
          required
          disabled={inputDisable}
        />
      </td>
      <td>
        <select
          required
          onChange={(e) => {
            setproduct_details((prev) => {
              return { ...prev, tax: e.target.value };
            });
          }}
          value={product_details.tax}
          disabled={inputDisable}
        >
          <option value="">Select Tax</option>
          {taxOptions.map((ele, ind) => (
            <option key={ind} value={ele}>
              {ele}
            </option>
          ))}
        </select>
      </td>
      <td>
        <input
          type="number"
          value={product_details.discount}
          onChange={(e) => {
            setproduct_details((prev) => {
              return { ...prev, discount: e.target.value };
            });
          }}
          required
          disabled={inputDisable}
        />
      </td>
      <td>
        {" "}
        <span>â‚¹</span>
        {productTotal(unique_key)}
      </td>
      <td id="newQuotation-table-content-center">
        <svg
          onClick={() => deleteQuotationProduct(unique_key)}
          className={`newQuotation-table-delete-logo ${
            inputDisable ? "disabled" : ""
          }`}
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 14 16"
        >
          <path d="M2.625 16C2.14375 16 1.73192 15.8261 1.3895 15.4782C1.04708 15.1304 0.875583 14.7117 0.875 14.2222V2.66667H0V0.888889H4.375V0H9.625V0.888889H14V2.66667H13.125V14.2222C13.125 14.7111 12.9538 15.1298 12.6114 15.4782C12.269 15.8267 11.8568 16.0006 11.375 16H2.625ZM4.375 12.4444H6.125V4.44444H4.375V12.4444ZM7.875 12.4444H9.625V4.44444H7.875V12.4444Z" />
        </svg>
      </td>
    </tr>
  );
}
